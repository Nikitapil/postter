// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  email        String
  name         String?
  username     String  @unique
  password     String
  profileImage String?

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  RefreshToken RefreshToken[]
  posts        Post[]
  mediaFiles   MediaFile[]
  likes        Likes[]
}

model RefreshToken {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  token String @unique

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  text String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  replyToId String? @db.ObjectId
  replyTo   Post?   @relation("replies", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Post[]  @relation("replies")

  mediaFiles MediaFile[]
  likes      Likes[]
}

model MediaFile {
  id  String @id @default(auto()) @map("_id") @db.ObjectId
  url String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId
}

model Likes {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  postId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "uniq_id")
}
